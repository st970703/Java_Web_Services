package nz.ac.auckland.concert.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.net.URI;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import nz.ac.auckland.concert.domain.Concert;
import nz.ac.auckland.concert.domain.Genre;
import nz.ac.auckland.concert.domain.Performer;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Simple JUnit test to test the behaviour of the Concert Web service.
 * 
 * The test is implemented using the JAX-RS client API.
 *
 */
public class ConcertResourceIT {

	private static Logger _logger = LoggerFactory
			.getLogger(ConcertResourceIT.class);

	private static String WEB_SERVICE_URI = "http://localhost:10000/services/concerts";

	private static Client _client;

	// List of Concerts.
	private static List<Concert> _concerts = new ArrayList<Concert>();

	// List of Concert URIs generated by the Web service. The Concert at
	// position i in _concerts has the URI at position i in _concertUris.
	private static List<String> _concertUris = new ArrayList<String>();

	@BeforeClass
	public static void createClient() {
		// Use ClientBuilder to create a new client that can be used to create
		// connections to the Web service.
		_client = ClientBuilder.newClient();

		// Create some Concerts.
		Performer queen = new Performer("Queen", "queen.jpg", Genre.Rock);
		_concerts.add(new Concert("One Night of Queen", LocalDateTime.of(2017, 8,
				4, 20, 0), queen));
		Performer paulineBlack = new Performer("Pauline Black", "paulineBlack.jpg", Genre.Pop);
		_concerts.add(new Concert("The Selecter and the Beat", LocalDateTime.of(
				2018, 1, 25, 20, 0), paulineBlack));
		Performer aliceCooper = new Performer("Alice Cooper", "aliceCooper.jpg", Genre.Rock);
		_concerts.add(new Concert("Spend the Night with Alice Cooper",
				LocalDateTime.of(2017, 10, 27, 19, 0), aliceCooper));
	}

	@AfterClass
	public static void closeConnection() {
		// After all tests have run, close the client.
		_client.close();
	}

	@Before
	public void clearAndPopulate() {
		// Delete all Concerts in the Web service.
		Builder builder = _client.target(WEB_SERVICE_URI).request();
		Response response = builder.delete();
		response.close();

		// Clear Parolee Uris
		_concertUris.clear();

		// Populate the Web service with Concerts.
		for (Concert concert : _concerts) {
			builder = _client.target(WEB_SERVICE_URI).request();
			response = builder.post(Entity.entity(concert,
					MediaType.APPLICATION_XML));
			String concertUri = response.getLocation().toString();
			_concertUris.add(concertUri);
			response.close();
		}
	}
	
	@Test
	public void test() {}
	
	//@Test
	public void testCreate() {
		Response response = null;

		// Create a new Concert.
		Performer performer = new Performer("Blondie", "blondie.jpg", Genre.Pop);
		Concert concert = new Concert("Blondie", LocalDateTime.of(2017, 4, 26, 20,
				0), performer);

		try {
			// Prepare an invocation on the Concert service
			Builder builder = _client.target(WEB_SERVICE_URI).request();

			// Make the service invocation via a HTTP POST message, and wait
			// for the response.
			response = builder.post(Entity.entity(concert,
					MediaType.APPLICATION_XML));

			// Check that the HTTP response code is 201 Created.
			int responseCode = response.getStatus();
			assertEquals(Response.Status.CREATED.getStatusCode(), responseCode);

			// Check that the Location header has been set.
			URI concertUri = response.getLocation();
			assertNotNull(concertUri);
		} finally {
			// Close the Response object.
			response.close();
		}
	}

	//@Test
	public void testRetrieve() {
		Response response = null;

		try {
			String concertUri = _concertUris.get(_concertUris.size() - 1);

			// Make an invocation on a Concert URI and specify Java-
			// serialization as the required data format.
			Builder builder = _client.target(concertUri).request()
					.accept(MediaType.APPLICATION_XML);

			// Make the service invocation via a HTTP GET message, and wait for
			// the response.
			response = builder.get();

			// Check that the HTTP response code is 200 OK.
			int responseCode = response.getStatus();
			assertEquals(Response.Status.OK.getStatusCode(), responseCode);

			// Check that the expected Concert is returned.
			Concert concert = response.readEntity(Concert.class);
			assertEquals(_concerts.get(_concerts.size() - 1).getTitle(),
					concert.getTitle());
		} finally {
			// Close the Response object.
			response.close();
		}
	}

	//@Test
	public void testUpdate() {
		Response response = null;

		try {
			String concertUri = _concertUris.get(_concertUris.size() - 1);

			// Prepare an invocation on a Concert URI.
			Builder builder = _client.target(concertUri).request()
					.accept(MediaType.APPLICATION_XML);

			// Make the service invocation via a HTTP GET message, and wait for
			// the response.
			response = builder.get();
			
			// Extract the Concert returned from the GET request.
			Concert concert = response.readEntity(Concert.class);
			response.close();
			
			
			// Modify the Concert's date.
			LocalDateTime now = LocalDateTime.now();
			concert.setDate(now);
			
			// Prepare an invocation on the Concerts URI.
			builder = _client.target(WEB_SERVICE_URI).request();
			
			// Make the service invocation via a HTTP PUT request, supplying 
			// the updated Concert in the request message body.
			response = builder.put(Entity.entity(concert,
					MediaType.APPLICATION_XML));
			
			// Check that the PUT request was successful.
			assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());
			response.close();
			
			// Re-query the Concert, and check that its date has been modified.
			response = _client.target(concertUri).request()
					.accept(MediaType.APPLICATION_XML).get();
			concert = response.readEntity(Concert.class);
			assertEquals(now, concert.getDate());
			
		} finally {
			// Close the Response object.
			response.close();
		}
	}
	
	@Test
	public void testDelete() {
		Response response = null;

		try {
			String concertUri = _concertUris.get(_concertUris.size() - 1);

			// Prepare an invocation on a Concert URI.
			Builder builder = _client.target(concertUri).request();

			// Make the service invocation via a HTTP DELETE message, and wait 
			// for the response.
			response = builder.delete();
			
			// Check that the DELETE request was successful.
			assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());
			response.close();
			
			// Requery the Concert.
			response = _client
					.target(concertUri)
					.request()
					.accept(MediaType.APPLICATION_XML)
					.get();
			
			// Check that the GET request returns a 404 result.
			assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());
			
		} finally {
			// Close the Response object.
			response.close();
		}
	}
	
	@Test
	public void testDeleteAll() {
		Response response = null;

		try {
			// Prepare an invocation on the Concert Web service.
			Builder builder = _client.target(WEB_SERVICE_URI).request();

			// Make the service invocation via a HTTP DELETE message, and wait
			// for the response.
			response = builder.delete();

			// Check that the HTTP response code is 204 No content.
			int status = response.getStatus();
			assertEquals(Response.Status.NO_CONTENT.getStatusCode(), status);
		} finally {
			// Close the Response object.
			response.close();
		}
	}
}